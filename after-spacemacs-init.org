* spacemacs

loading addtional packages

#+BEGIN_SRC emacs-lisp
(require 'ox-twbs)
(require 'emojify)
#+END_SRC
* magit
  #+BEGIN_SRC emacs-lisp
(spacemacs/set-leader-keys "y" smerge-basic-map)
#+END_SRC
* org-mode
** present
 i can customize org-present behaviour here
#+BEGIN_SRC emacs-lisp
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 ))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 ))))
#+END_SRC
** roam
#+BEGIN_SRC emacs-lisp
(setq org-roam-v2-ack t)
#+END_SRC
** babel
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t)
                                 (python . t)
                                 (dot . t)))
  (setq org-babel-python-command "python3")
#+END_SRC
** site-publish
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist 
            '(("site"
               :base-directory "~/Desktop/falcowinkler.github.io/org"
               :base-extension "org"
               :publishing-directory "~/Desktop/falcowinkler.github.io"
               :recursive t
               :publishing-function org-twbs-publish-to-html
               :headline-levels 4
               :auto-preamble t
               :auto-postamble nil
               :html-head-extra "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/python_course.css\">")
              ("site-images"
               :base-directory "~/Desktop/falcowinkler.github.io/org"
               :base-extension "png\\|jpg\\|svg"
               :recursive t
               :publishing-directory "~/Desktop/falcowinkler.github.io/images"
               :publishing-function org-publish-attachment
   )))
#+END_SRC

#+RESULTS:
| org-notes | :base-directory | ~/Desktop/falcowinkler.github.io/org | :base-extension | org | :publishing-directory | ~/Desktop/falcowinkler.github.io | :recursive | t | :publishing-function | org-twbs-publish-to-html | :headline-levels | 4 | :auto-preamble | t | :auto-postamble | nil | :html-head-extra | <link rel="stylesheet" type="text/css" href="css/python_course.css"> |

** other
** pdf-export
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
*** utility functions
#+BEGIN_SRC emacs-lisp
(defun org-swift-code-block ()
  (interactive)
  (save-excursion
    (insert "#+BEGIN_SRC swift\n#+END_SRC"))
  (next-line))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun org-python-code-block ()
  (interactive)
  (save-excursion
    (insert "#+BEGIN_SRC python :results output :exports both\n\n#+END_SRC"))
  (next-line))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun org-elisp-code-block ()
  (interactive)
  (save-excursion
    (insert "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC"))
  (next-line))
#+END_SRC
#+BEGIN_SRC emacs-lisp
        (defun org-dot-code-block ()
          (interactive)
          (save-excursion
            (insert (concat "#+BEGIN_SRC dot :file x.svg :cmdline -Kdot -Tsvg\n"
                            "\n"
                            "#+END_SRC\n"
                            "#+attr_html: :src /images/reading-notes/functional-programming/simple-types.svg\n"
                            "#+RESULTS:\n"
                            "[[file:x.svg]]"))
            (next-line)))
#+END_SRC
*** settings 
Disable confirmation for code evaluation
#+BEGIN_SRC emacs-lisp
   (defun my-org-confirm-babel-evaluate (lang body)
     (not (member lang '("python" "dot"))))
   (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
   ; For some reason emacs doesn't pick up the path when run from Appliactions
   (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))
   (custom-set-variables
    '(org-directory "~/Dropbox/org")
    '(org-agenda-files (list org-directory)))
#+END_SRC
** org-todo
Customize todo-states and tags
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '(
        (sequence "IDEA(i)" "TODO(t)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)")
        (sequence "|" "CANCELED(c)" "DELEGATED(l)" "SOMEDAY(f)")
        ))
(setq org-todo-keyword-faces
      '(("IDEA" . (:foreground "GoldenRod" :weight bold))
        ("NEXT" . (:foreground "IndianRed1" :weight bold))
        ("STARTED" . (:foreground "OrangeRed" :weight bold))
        ("WAITING" . (:foreground "coral" :weight bold))
        ("CANCELED" . (:foreground "LimeGreen" :weight bold))
        ("DELEGATED" . (:foreground "LimeGreen" :weight bold))
        ("SOMEDAY" . (:foreground "LimeGreen" :weight bold))
        ))
#+END_SRC
Set location of agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org"))
#+END_SRC
(setq org-default-notes-file (concat org-directory "/inbox.org"))
** org-exporters
#+BEGIN_SRC emacs-lisp
  (setq org-twbs-postamble nil)
  (setq org-re-reveal-root "file:///Users/fawi/reveal.js")
  (setq org-re-reveal-revealjs-version "3.6.0")
  ;(setq org-reveal-root "file:///Users/falco.winkler/reveal.js-3.8.0")
  (setq org-reveal-title-slide nil)
#+END_SRC
Latex exporter settings
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process (quote ("texi2dvi -p -b -V %f")))
#+END_SRC
* dap
#+BEGIN_SRC emacs-lisp
  ;; (dap-register-debug-template
  ;;  "default pytest debur"
  ;;  (list :type "python"
  ;;        :request "launch"
  ;;        :args "-m pytest -sv"
  ;;        :target-module "tests"
  ;;        :name "Default pytest debug"))
#+END_SRC
* other settings
** keybinds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-i") 'imenu)
#+END_SRC
** convenience
#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
* python
#+BEGIN_SRC emacs-lisp
; usually more reliable
(setq pytest-cmd-format-string  "cd '%s' && python -m pytest")
#+END_SRC
* javascript
#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-configuration-layers
  '((javascript :variables javascript-repl `nodejs)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'treemacs
  (treemacs-resize-icons 15))
#+END_SRC
